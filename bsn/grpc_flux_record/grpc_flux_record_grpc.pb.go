// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: grpc_flux_record.proto

package grpc_flux_record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FluxRecordServiceClient is the client API for FluxRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluxRecordServiceClient interface {
	GetServiceStream(ctx context.Context, opts ...grpc.CallOption) (FluxRecordService_GetServiceStreamClient, error)
}

type fluxRecordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFluxRecordServiceClient(cc grpc.ClientConnInterface) FluxRecordServiceClient {
	return &fluxRecordServiceClient{cc}
}

func (c *fluxRecordServiceClient) GetServiceStream(ctx context.Context, opts ...grpc.CallOption) (FluxRecordService_GetServiceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FluxRecordService_ServiceDesc.Streams[0], "/grpc_flux_record.FluxRecordService/GetServiceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fluxRecordServiceGetServiceStreamClient{stream}
	return x, nil
}

type FluxRecordService_GetServiceStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type fluxRecordServiceGetServiceStreamClient struct {
	grpc.ClientStream
}

func (x *fluxRecordServiceGetServiceStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fluxRecordServiceGetServiceStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FluxRecordServiceServer is the server API for FluxRecordService service.
// All implementations must embed UnimplementedFluxRecordServiceServer
// for forward compatibility
type FluxRecordServiceServer interface {
	GetServiceStream(FluxRecordService_GetServiceStreamServer) error
	mustEmbedUnimplementedFluxRecordServiceServer()
}

// UnimplementedFluxRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFluxRecordServiceServer struct {
}

func (UnimplementedFluxRecordServiceServer) GetServiceStream(FluxRecordService_GetServiceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServiceStream not implemented")
}
func (UnimplementedFluxRecordServiceServer) mustEmbedUnimplementedFluxRecordServiceServer() {}

// UnsafeFluxRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluxRecordServiceServer will
// result in compilation errors.
type UnsafeFluxRecordServiceServer interface {
	mustEmbedUnimplementedFluxRecordServiceServer()
}

func RegisterFluxRecordServiceServer(s grpc.ServiceRegistrar, srv FluxRecordServiceServer) {
	s.RegisterService(&FluxRecordService_ServiceDesc, srv)
}

func _FluxRecordService_GetServiceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FluxRecordServiceServer).GetServiceStream(&fluxRecordServiceGetServiceStreamServer{stream})
}

type FluxRecordService_GetServiceStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type fluxRecordServiceGetServiceStreamServer struct {
	grpc.ServerStream
}

func (x *fluxRecordServiceGetServiceStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fluxRecordServiceGetServiceStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FluxRecordService_ServiceDesc is the grpc.ServiceDesc for FluxRecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FluxRecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_flux_record.FluxRecordService",
	HandlerType: (*FluxRecordServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServiceStream",
			Handler:       _FluxRecordService_GetServiceStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_flux_record.proto",
}

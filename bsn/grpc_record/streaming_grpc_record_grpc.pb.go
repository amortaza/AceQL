// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: streaming_grpc_record.proto

package grpc_record

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordServiceClient is the client API for RecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordServiceClient interface {
	BabaSays(ctx context.Context, opts ...grpc.CallOption) (RecordService_BabaSaysClient, error)
}

type recordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordServiceClient(cc grpc.ClientConnInterface) RecordServiceClient {
	return &recordServiceClient{cc}
}

func (c *recordServiceClient) BabaSays(ctx context.Context, opts ...grpc.CallOption) (RecordService_BabaSaysClient, error) {
	stream, err := c.cc.NewStream(ctx, &RecordService_ServiceDesc.Streams[0], "/grpc_record.RecordService/BabaSays", opts...)
	if err != nil {
		return nil, err
	}
	x := &recordServiceBabaSaysClient{stream}
	return x, nil
}

type RecordService_BabaSaysClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type recordServiceBabaSaysClient struct {
	grpc.ClientStream
}

func (x *recordServiceBabaSaysClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *recordServiceBabaSaysClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordServiceServer is the server API for RecordService service.
// All implementations must embed UnimplementedRecordServiceServer
// for forward compatibility
type RecordServiceServer interface {
	BabaSays(RecordService_BabaSaysServer) error
	mustEmbedUnimplementedRecordServiceServer()
}

// UnimplementedRecordServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServiceServer struct {
}

func (UnimplementedRecordServiceServer) BabaSays(RecordService_BabaSaysServer) error {
	return status.Errorf(codes.Unimplemented, "method BabaSays not implemented")
}
func (UnimplementedRecordServiceServer) mustEmbedUnimplementedRecordServiceServer() {}

// UnsafeRecordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServiceServer will
// result in compilation errors.
type UnsafeRecordServiceServer interface {
	mustEmbedUnimplementedRecordServiceServer()
}

func RegisterRecordServiceServer(s grpc.ServiceRegistrar, srv RecordServiceServer) {
	s.RegisterService(&RecordService_ServiceDesc, srv)
}

func _RecordService_BabaSays_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RecordServiceServer).BabaSays(&recordServiceBabaSaysServer{stream})
}

type RecordService_BabaSaysServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type recordServiceBabaSaysServer struct {
	grpc.ServerStream
}

func (x *recordServiceBabaSaysServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *recordServiceBabaSaysServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RecordService_ServiceDesc is the grpc.ServiceDesc for RecordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_record.RecordService",
	HandlerType: (*RecordServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BabaSays",
			Handler:       _RecordService_BabaSays_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streaming_grpc_record.proto",
}
